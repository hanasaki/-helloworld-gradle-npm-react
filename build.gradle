/*
 * Author : Frederick Bloom / hanasaki
 */

//====================================
// SETUP CONFIG AND REPOSITORIES FOR THE BUILDSCRIPT TO USE
buildscript {
    repositories {
        mavenLocal()
        mavenCentral();
        // You may define additional repositories, or even remove "mavenCentral()".
        // Read more about repositories here:
        //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories

        maven { url "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3+"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
    }
}
plugins {
    id "com.dorongold.task-tree" version "1.3"
    // https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
    id "com.moowork.node" version "1.2.0"
}

//====================================
// GRADLE PLUGINS TO BE USED IN THE BUILD
apply plugin: 'base' // To add "clean" task to the root project.
apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'org.junit.platform.gradle.plugin'

//====================================
// CONFIGURE NODE FOR NPM USAGE
node {
    version = '10.8.0'
    npmVersion = '6.4.0'
    //    dist = 'https://nodejs.org/dist'
    download = true
    // INSURE THE NPM INSTAL VERSION IS INSTALLED INTO THE BUILDIR : RT + WORK PACKAGES
    workDir = file("${project.buildDir}/npm/runtime")
    npmWorkDir = file("${project.buildDir}/npm/work")
    nodeModulesDir = file("${project.projectDir}")
}

//====================================
// INSTALLS NPM AFTER JAVA BUILD - Assumes npm and react / GUI layered above Java server
build.dependsOn(npm_install)
// DELETE also deletes projectDir/node_modules and created react bundle
clean.delete << file('node_modules')
clean.delete << file("${project.projectDir}/src/webapp/site/js/compiled")

//import com.moowork.gradle.node.task.NodeTask
task webpack(type: NodeTask, dependsOn: 'npmInstall') {
    // NodeTask from  // https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
    script = project.file("${project.projectDir}/node_modules/.bin/webpack")
    args = ["--config", "src/webapp/webpack.config.js", "-d"]
}
processResources.dependsOn 'webpack' // webpack before java resources

//====================================
// setup for build counter
ext {
    versionFile = new File(project.rootDir, 'version.properties')
    calculateVersionName = {
        def versionProps = readVersion()
        return "${versionProps['major']}.${versionProps['minor']}.${versionProps['patch']}-${versionProps['build']}"
    }
}
//
version=ext.calculateVersionName()
project.version=ext.calculateVersionName()

//====================================
// set project group & version for gradle
//version = rootProject.version
//group = rootProject.group
//[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
//    sourceCompatibility = java.src.version
//    targetCompatibility = java.target.version

// add in common.gradle
//task allDeps(type: DependencyReportTask) {}
subprojects {
    task allDeps(type: DependencyReportTask) {}
    apply from: rootProject.file('common.gradle')
}

allprojects {
    project.version = rootProject.version
    group = rootProject.group
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    //    sourceCompatibility = java.src.version
    //    targetCompatibility = java.target.version
    //
    dependencies {
        // Adding dependencies here will add the dependencies to each subproject.
        compile "joda-time:joda-time:2.2"
        compile "org.slf4j:slf4j-api:1.7.25"
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter")
        //
        testCompile('org.junit.jupiter:junit-jupiter-api:' + junitVersion)
        testRuntime("org.junit.jupiter:junit-jupiter-engine:5.2.0")

        // TODO: Add dependencies here ...
        // You can read more about how to add dependency here:
        //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies

    }
}
apply from: 'common.gradle' // must go after all projects else : apply from: 'common.gradle'

Properties readVersion() {
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
        println ignore.toString()
    } finally {
        if (stream != null) stream.close()
    }
    // safety defaults in case file is missing
    if(!version['major']) version['major'] = "1"
    if(!version['minor']) version['minor'] = "0"
    if(!version['patch']) version['minor'] = "0"
    if(!version['build']) version['build'] = "0"
    return version
}

void incrementVersionNumber() {
    def version = readVersion()

    // careful with the types, culprits: "9"++ = ":", "9" + 1 = "91"
    def build = version['build'] as int
    build++
    version['build'] = build.toString()
    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

gradle.taskGraph.whenReady {taskGraph ->
    //    if (taskGraph.hasTask(assembleDebug)) {  /* when run debug task */
    //        incrementVersionNumber()
    //    } else if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
    //        incrementVersionNumber()
    //    } else
    //    if (!taskGraph.hasTask(release)) {
    //        //        rootProject.version='1.1.5'
    //        version='-SNAPSHOT'
    //    }
    if (taskGraph.hasTask(assemble)) {
        incrementVersionNumber()
    }
}


